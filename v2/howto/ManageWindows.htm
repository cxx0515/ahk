<!DOCTYPE html>
<html lang="en">
<head>
<meta name="description" content="Learn how to activate or manipulate windows." />
<meta name="ahk:equiv-v1" content="misc/WinTitle.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>How to Manage Windows | AutoHotkey v2</title>
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>如何管理窗口</h1>
<p>AutoHotkey 可以做的最简单和最有用的事情之一是允许您创建操作窗口的键盘快捷键(热键). 脚本可以激活, 关闭, 最小化, 最大化, 恢复, 隐藏, 显示或移动几乎任何窗口. 这是通过调用适当的 <a href="../lib/Win.htm">Win 函数</a>来完成的, 通过标题或其他一些条件来指定窗口:</p>
<pre>Run "notepad.exe"
WinWait "Untitled - Notepad"
WinActivate "Untitled - Notepad"
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2, "Untitled - Notepad"</pre>
<p>这个例子应该打开一个新的记事本窗口, 然后移动它来填充主屏幕的一部分(宽度的 &frac14;, 和高度的 &frac12;). 要了解如何试用, 请参阅<a href="RunExamples.htm">如何运行示例代码</a>.</p>

<p>由于不是本篇文档的重点, 我们不会在这里详细讨论用于操作窗口的许多函数. 例如, 要最小化窗口而不是激活它, 请将 <code>WinActivate</code> 替换为 <code>WinMinimize</code>. 有关可以操作窗口或检索信息的函数列表, 请参阅 <a href="../lib/Win.htm">Win 函数</a>.</p>
<p>本教程的大部分内容都是关于如何 <em>识别</em> 要在哪个窗口上进行操作, 因为这通常是最麻烦的部分. 例如, 上面的例子有一些问题:</p>
<ul>
  <li>窗口的标题没有必要重复.</li>
  <li>该标题仅适用于 UI 语言设置为英语的系统.</li>
  <li>它可能会移动一个现有的无标题记事本窗口, 而不是新的.</li>
  <li>如果由于某种原因没有出现匹配的窗口, 脚本将无限期地停止运行.</li>
</ul>
<p>在介绍了一些基本知识之后, 我们将逐个解决这些问题.</p>
<p class="note"><strong>提示:</strong> AutoHotkey 自带一个名为 <em>Window Spy</em> 的脚本, 可以用来确认窗口的标题, 类和进程名. 当仅通过标题识别窗口不可行的时候, 通常会使用类名和进程名. 您可以在脚本的<a href="../Program.htm#tray-icon">托盘菜单</a>或 <a href="../Program.htm#dash">AutoHotkey Dash</a> 中找到 Window Spy.</p>

<h2 id="ttm">标题匹配</h2>
<p>在通过标题指定窗口时, 有几件事需要知道:</p>
<ul>
  <li>窗口标题始终区分大小写, 除非使用 RegEx 匹配模式和 <a href="../misc/RegEx-QuickRef.htm#opt_i">i) 修饰符</a>.</li>
  <li>默认情况下, 函数需要窗口标题的子字符串. 例如, "Notepad" 可以同时匹配 "Untitled - Notepad" 和 "C:\A\B.ahk - Notepad2". <a href="../lib/SetTitleMatchMode.htm">SetTitleMatchMode</a> 可用于使函数期望前缀, 精确匹配或 RegEx 模式.</li>
  <li>默认情况下, 隐藏窗口将被忽略(<a href="../lib/WinShow.htm">WinShow</a> 除外). <a href="../lib/DetectHiddenWindows.htm">DetectHiddenWindows</a> 可以用来改变这一点.</li>
</ul>
<p>有关详情, 请参阅<a href="../misc/WinTitle.htm#Matching">匹配行为</a>.</p>

<h2 id="A">活动窗口</h2>
<p>要引用活动窗口, 请使用字母 "A" 代替窗口标题. 例如, 这将最小化活动窗口:</p>
<pre>WinMinimize "A"</pre>

<h2 id="lfw">最后找到窗口</h2>
<p>当 <a href="../lib/WinWait.htm">WinWait</a>, <a href="../lib/WinExist.htm">WinExist</a>, <a href="../lib/WinActive.htm">WinActive</a>, <a href="../lib/WinWaitActive.htm">WinWaitActive</a> 或 <a href="../lib/WinWaitActive.htm">WinWaitNotActive</a> 找到一个匹配的窗口时, 他们将其设置为<a href="../misc/WinTitle.htm#LastFoundWindow"><em>最后找到的窗口</em></a>. 大多数窗口函数允许省略窗口标题(和相关参数), 在这种情况下, 默认为最后找到的窗口. 例如:</p>
<pre>Run "notepad.exe"
WinWait "Untitled - Notepad"
WinActivate
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2</pre>
<p>这样可以避免重复窗口标题, 从而节省了一些时间, 如果需要更改窗口标题, 则可以更容易地更新脚本, 并且可能使代码更易于阅读. 它确保脚本每次都在同一个窗口上操作, 即使有多个匹配的窗口, 或者在 "找到的" 窗口后窗口标题发生了变化, 也使脚本更加可靠. 它还使脚本更有效地执行, 但不是很多.</p>

<h2 id="class">窗口类</h2>
<p>窗口类是一组属性, 用作创建窗口的模板. 通常, 窗口类的名称与应用程序或窗口的用途有关. 当窗口存在时, 窗口的类永远不会改变, 因此当通过标题进行标识是不切实际或不可能的时候, 我们经常可以使用它来标识窗口.</p>
<p>例如, 我们可以使用窗口的类, 而不是窗口标题 "Untitled - Notepad", 在这种情况下, <em>不管</em> 系统语言是什么, 它恰好是 "Notepad":</p>
<pre>Run "notepad.exe"
WinWait "ahk_class Notepad"
WinActivate
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2</pre>
<p>窗口类通过使用单词 "ahk_class" 来区别于标题, 如上面所示. 若要组合多个条件, 请先列出窗口标题. 例如: "Untitled ahk_class Notepad".</p>
<p><strong>相关:</strong> <a href="../misc/WinTitle.htm#ahk_class">ahk_class</a></p>

<h2 id="exe">进程名称/路径</h2>
<p>可以由创建它们的进程来识别窗口, 方法是使用单词 "ahk_exe" 后跟进程名称或路径. 例如:</p>
<pre>Run "notepad.exe"
WinWait "ahk_exe notepad.exe"
WinActivate
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2</pre>
<p><strong>相关:</strong> <a href="../misc/WinTitle.htm#ahk_exe">ahk_exe</a></p>

<h2 id="pid">Process ID (PID)</h2>
<p>每个进程都有一个 ID 号, 该 ID 号在进程退出之前保持唯一. 我们可以使用这个来使我们的 Notepad 示例更加可靠, 确保它忽略除新进程创建的记事本窗口外的任何记事本窗口:</p>
<pre>Run "notepad.exe",,, &amp;notepad_pid
WinWait "ahk_pid " notepad_pid
WinActivate
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2</pre>
<p>我们需要连续三个逗号; 其中两个只是跳过 Run 函数的未使用的 <em>WorkingDir</em> 和 <em>Options</em> 参数, 因为我们想要的(<em>OutputVarPID</em>) 是第四个参数.</p>
<p>Ampersand(&amp;) 是 <a href="../Variables.htm#ref">引用操作符</a>. 这用于 <em>通过引用</em> 将 <code>notepad_pid</code> 变量传递给 Run 函数(换句话说, 传递变量本身而不是它的值), 允许函数为变量分配一个新值. 然后 <code>notepad_pid</code> 成为实际进程 ID 的占位符.</p>
<p><a href="../Concepts.htm#strings">字符串</a> "ahk_pid " 与 notepad_pid 变量所包含的进程 ID <a href="../Variables.htm#concat">相连接</a>, 只需将它们按顺序写入, 并用空格分隔. 结果是一个类似 "ahk_pid 1040" 的字符串, 但是这个数字是不可预测的.</p>
<p>如果新进程可能创建多个窗口, 则可以通过用空格分隔窗口标题和其他条件来组合它们. 窗口标题必须始终排在前面. 例如: <code>"Untitled ahk_class Notepad ahk_pid " notepad_pid</code>.</p>
<p><strong>相关:</strong> <a href="../misc/WinTitle.htm#ahk_pid">ahk_pid</a></p>

<h2 id="hwnd">窗口 ID(HWND)</h2>
<p>每个窗口都有一个唯一的 ID 号, 直到窗口被销毁. 在编程术语中, 这被称为 "窗口句柄" 或 HWND. 尽管不像使用 <em>最后找到的窗口</em> 那样方便, 但窗口的 ID 可以存储在一个变量中, 以便脚本可以通过您选择的名称引用它, 即使标题发生了变化. 一次只能有一个 <em>最后找到的窗口</em>, 但是可以使用尽可能多的窗口 id 来创建变量名(也可以使用) <a href="../lib/Array.htm">数组</a>).</p>
<p>窗口 ID 由 <a href="../lib/WinWait.htm">WinWait</a>, <a href="../lib/WinExist.htm">WinExist</a> 或 <a href="../lib/WinActive.htm">WinActive</a> <a href="../Concepts.htm#return-a-value">返回</a>, 也可以来自其他来源. 可以重写记事本示例以利用这一点:</p>
<pre>Run "notepad.exe"
notepad_id := WinWait("Untitled - Notepad")
WinActivate notepad_id
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2, notepad_id</pre>
<p>这将 WinWait 的返回值赋给变量 "notepad_id". 换句话说, 当 WinWait 找到窗口时, 它生成窗口的 ID 作为结果, 然后脚本将这个结果存储在变量中. "notepad_id" 只是我为这个例子创建的一个名称; 您可以使用任何对您有意义的变量名(在<a href="../Concepts.htm#names">某些限制条件</a>下).</p>
<p>注意, 我在窗口标题周围添加了圆括号, <em>紧跟</em> 着函数名. 在<a href="../Language.htm#function-call-statements">函数调用语句</a>中可以省略括号(也就是说, 函数调用在一行的最开始), 但在这种情况下, 您无法获得函数的返回值.</p>
<p>脚本还可以保留<a href="../Concepts.htm#variables">变量</a> <code>notepad_id</code> 以供以后使用, 例如关闭或重新激活窗口或将其移动到其他地方.</p>
<p><strong>相关:</strong> <a href="../misc/WinTitle.htm#ahk_id">ahk_id</a></p>

<h2 id="timeout">Timeout</h2>
<p>默认情况下, WinWait 将无限期地等待匹配的窗口出现. 您可以通过<a href="../Program.htm#tray-icon">托盘图标</a>打开脚本的<a href="../Program.htm#main-window">主窗口</a>来确定是否发生了这种情况(除非您已<a href="../lib/_NoTrayIcon.htm">禁用它</a>). 默认情况下, 窗口通常打开 <a href="../lib/ListLines.htm#Remarks">ListLines</a>. 如果 WinWait 仍在等待, 它将出现在行列表的最底部, 后面跟着它开始等待的秒数. 除非从"视图"菜单中选择"刷新", 否则数字不会更新.</p>
<p>试着运行这个例子并像上面描述的那样打开主窗口:</p>
<pre>WinWait "Untitled - Notpad"  <em>; (故意输错)</em></pre>
<p>如果脚本卡住等待窗口, 您通常需要退出或重新加载脚本来解除卡住. 为了防止这种情况发生(或再次发生), 您可以使用 WinWait 的<em>timeout</em> 参数. 例如, 这将等待最多 5 秒的窗口出现:</p>
<pre>Run "notepad.exe",,, &amp;notepad_pid
if WinWait("ahk_pid " notepad_pid,, 5)
{
    WinActivate
    WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2
}</pre>
<p>If 语句下面的 <a href="../lib/Block.htm">block</a> 只有在 WinWait 找到匹配的窗口时才会执行. 如果超时, 则跳过该块, 并在结束大括号之后继续执行(如果它之后有任何代码).</p>
<p>注意, 当我们想在<a href="../Language.htm#expressions">表达式</a>中使用函数的结果时(比如<a href="../lib/If.htm"> if 语句</a>的条件) "WinWait" 后面的括号是必需的. 您可以将<a href="../Language.htm#function-calls">函数调用</a>本身视为函数结果的替代品. 例如, 如果 WinWait 在超时之前找到一个匹配, 结果是非零. <code>if 1</code> 将执行 If 语句下面的块, 而 <code>if 0</code> 将跳过它.</p>
<p>另一种书写方法是, 如果等待超时, 则提前返回(换句话说, abort). 例如:</p>
<pre>Run "notepad.exe",,, &amp;notepad_pid
if !WinWait("ahk_pid " notepad_pid,, 5)
    return
WinActivate
WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2</pre>
<p>通过应用<a href="../Variables.htm#unary">逻辑非</a>运算符(<code>!</code> 或 <code>not</code>) 来反转结果. 如果 WinWait 超时, 则结果为 0. <code>!0</code> 的结果是 1, 所以当 WinWait 超时时, if 语句执行 <code>return</code>.</p>
<p>WinWait 的结果实际上是窗口的 ID(如上所述), 如果超时则为零. 如果你还想通过 ID 引用窗口, 你可以将结果赋值给一个变量, 而不是直接在 If 语句中使用它:</p>
<pre>Run "notepad.exe",,, &amp;notepad_pid
notepad_id := WinWait("ahk_pid " notepad_pid,, 5)
if notepad_id
{
    WinActivate notepad_id
    WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2, notepad_id
}</pre>
<p>为了避免重复变量名, 你可以同时将结果赋值给一个变量, 并检查它是否为非零(<a href="../Concepts.htm#boolean"><em>true</em></a>):</p>
<pre>Run "notepad.exe",,, &amp;notepad_pid
if notepad_id := WinWait("ahk_pid " notepad_pid,, 2)
{
    WinActivate notepad_id
    WinMove 0, 0, A_ScreenWidth/4, A_ScreenHeight/2, notepad_id
}</pre>
<p>在这种情况下, 注意不要混淆 <code>:=</code>(赋值) 和 <code>=</code> 或 <code>==</code>(比较). 例如, <code>if myvar := 0</code> 分配一个新值, 并且每次都给出相同的结果(false), 而 <code>if myvar = 0</code> 则将先前分配的值与 0 进行比较.</p>

<h2 id="math">表达式(数学运算等.)</h2>
<p>当您想要移动一个窗口时, 相对于它之前的位置或大小移动它或调整它的大小通常是有用的, 这可以通过使用 <a href="../lib/WinGetPos.htm">WinGetPos</a> 函数来检索. 例如, 通过按住 <kbd>RCtrl</kbd> 并按方向键, 下面的热键可以在每个方向上移动活动窗口 10 个像素:</p>
<pre>&gt;^Left::    MoveActiveWindowBy(-10,   0)
&gt;^Right::   MoveActiveWindowBy(+10,   0)
&gt;^Up::      MoveActiveWindowBy(  0, -10)
&gt;^Down::    MoveActiveWindowBy(  0, +10)

MoveActiveWindowBy(x, y) {
    WinExist "A"  <em>; 使活动窗口成为 "上次找到的窗口"  </em>
    WinGetPos &amp;current_x, &amp;current_y
    WinMove current_x + x, current_y + y
}</pre>
<p>该示例<a href="../Functions.htm#intro">定义了一个函数</a>来避免代码多次重复. <code>x</code> 和 <code>y</code> 成为每个热键中指定的两个数字的占位符. WinGetPos 将当前位置存储在 <code>current_x</code> 和 <code>current_y</code> 中, 然后将其添加到 <code>x</code> 和 <code>y</code> 中.</p>
<p>像这样的简单表达式应该看起来相当熟悉. 有关详情, 请参阅<a href="../Variables.htm#Expressions">表达式</a>; 但是要注意, 有很多细节你可能不需要马上学习.</p>

</body>
</html>