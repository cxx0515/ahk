<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>WinGetText - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The WinGetText function retrieves the text from the specified window." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>WinGetText</h1>

<p>从指定窗口检索文本.</p>

<pre class="Syntax">Text := <span class="func">WinGetText</span>(<span class="optional">WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>WinTitle, WinText, ExcludeTitle, ExcludeText</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>, <a href="../Concepts.htm#numbers">整数</a>或<a href="../Concepts.htm#objects">对象</a></p>
    <p>如果这些都是空白或省略, 将使用<a href="../misc/WinTitle.htm#LastFoundWindow">上次找到的窗口</a>. 否则, 为 <em>WinTitle</em> 指定<a href="../misc/WinTitle.htm">窗口标题或其他条件</a>, 来标识目标窗口, 和/或为 <em>WinText</em> 指定目标窗口的单个文本元素的子字符串(由包含的 Window Spy 实用程序显示).</p>
    <p><em>ExcludeTitle</em> 和 <em>ExcludeText</em> 可用于根据标题或文本排除一个或多个窗口. 它们的规范类似于 <em>WinTitle</em> 和 <em>WinText</em>, 除了 <em>ExcludeTitle</em> 不识别除窗口标题之外的任何条件.</p>
    <p>窗口标题和文本是区分大小写的. 默认情况下, 不检测隐藏窗口, 而检测隐藏文本元素, 除非使用 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 和 <a href="DetectHiddenText.htm">DetectHiddenText</a> 进行更改. 默认情况下, 窗口标题必须以指定的 <em>WinTitle</em> 或 <em>ExcludeTitle</em> 开头才能匹配, 除非使用 <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> 进行更改.</p>
  </dd>

</dl>

<h2 id="Return_Value">返回值</h2>
<p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
<p>函数返回指定窗口的文本.</p>

<h2 id="Error_Handling">错误处理</h2>
<p>如果找不到窗口, 则抛出 <a href="Error.htm#TargetError">TargetError</a>.</p>
<p>如果在检索窗口文本时出现问题, 则抛出 <a href="Error.htm">Error</a>.</p>

<h2 id="Remarks">备注</h2>
<p>通常情况下获取的文本和 Window Spy 中显示的相同. 但是, 如果 <a href="DetectHiddenText.htm">DetectHiddenText</a> 为关闭状态, 则返回值中省略了隐藏的文本.</p>
<p>每个文本元素都以回车换行符(CR+LF) 结束, 它们在脚本中表示为 `r`n. 要提取个别行或子字符串, 请使用类似 <a href="InStr.htm">InStr</a> 和 <a href="SubStr.htm">SubStr</a> 的函数. <a href="LoopParse.htm">解析循环</a>还可用于逐个检查每行或每个单词.</p>
<p>如果获取的文本看起来像被截短了(不完整), 可能需要通过 <a href="SendMessage.htm">SendMessage</a> 发送 WM_GETTEXT 消息来获取文本. 这是很有必要的, 因为有些应用程序不能正确响应 WM_GETTEXTLENGTH 消息, 这会导致 AutoHotkey 将返回值设置得太小, 无法容纳所有的文本. 因为某些应用程序不能正确响应 WM_GETTEXTLENGTH 消息, 所以这是必要的, 否则会导致 AutoHotkey 把输出变量设的过小以致无法保存所有的文本.</p>
<p>如果目标窗口(例如打开大文档的编辑器) 包含大量文本, 则此函数可能会使用大量 RAM. 为了避免这种情况, 可以通过使用 <a href="ControlGetText.htm">ControlGetText</a> 来仅检索窗口文本的一部分. 无论如何, 以后可以通过将变量赋值为空来释放变量的内存, 例如 <code>Text := ""</code>.</p>
<p>没有必要执行 <code>SetTitleMatchMode "Slow"</code>, 因为 WinGetText 总是使用慢速模式检索文本(因为它适用于更广泛的控件类型).</p>
<p>要获取窗口中所有控件的数组, 请使用 <a href="WinGetControls.htm">WinGetControls</a> 或 <a href="WinGetControlsHwnd.htm">WinGetControlsHwnd</a>.</p>

<h2 id="Related">相关</h2>
<p><a href="ControlGetText.htm">ControlGetText</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="WinGetPos.htm">WinGetPos</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 打开计算器, 等待其存在, 并检索和报告其文本.</p>
<pre>Run "calc.exe"
WinWait "Calculator"
MsgBox "The text is:`n" WinGetText()  <em>; 使用由 WinWait 找到的窗口.</em></pre>
</div>

</body>
</html>