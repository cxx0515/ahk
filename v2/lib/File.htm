<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>文件对象 - 方法 &amp; 属性 | AutoHotkey v2</title>
<meta name="description" content="The file object provides an interface for file input/output, such as reading or writing text or retrieving its length." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>文件对象</h1>
<pre class="NoIndent">class File extends Object</pre>

<p>提供文件输入/输出的接口, 例如读取或写入文本或检索其长度. <a href="FileOpen.htm">FileOpen</a> 返回此类型的对象.</p>

<p>下面使用 "FileObj" 作为任何文件对象的占位符, 因为 "File" 就是类本身.</p>
<p>除了从 <a href="Object.htm">Object</a> 继承的方法和属性外, File 对象还具有以下预定义的方法和属性.</p>

<h2 id="toc">目录</h2>
<ul class="indent">
  <li><a href="#Methods">方法</a>:
    <ul>
      <li><a href="#Read">Read</a>: 从文件中读取字符串, 并向后移动文件指针.</li>
      <li><a href="#Write">Write</a>: 写入字符串到文件, 并向后移动文件指针.</li>
      <li><a href="#ReadLine">ReadLine</a>: 从文件中读取一行文本, 并向后移动文件指针.</li>
      <li><a href="#WriteLine">WriteLine</a>: 将一行文本写入文件, 并向后移动文件指针.</li>
      <li><a href="#ReadNum">Read<em>NumType</em></a>: 从文件中读取指定类型的数据, 并向后移动文件指针.</li>
      <li><a href="#WriteNum">Write<em>NumType</em></a>: 写入指定类型的数据到文件, 并向后移动文件指针.</li>
      <li><a href="#RawRead">RawRead</a>: 从文件读取原始的二进制数据到内存, 并向后移动文件指针.</li>
      <li><a href="#RawWrite">RawWrite</a>: 写入原始的二进制数据到文件, 并向后移动文件指针.</li>
      <li><a href="#Seek">Seek</a>: 移动文件指针.</li>
      <li><a href="#Close">Close</a>: 关闭文件, 将缓存中的所有数据写入磁盘并释放共享锁定.</li>
    </ul>
  </li>
  <li><a href="#Properties">属性</a>:
    <ul>
      <li><a href="#Pos">Pos</a>: 获取或设置文件指针的位置.</li>
      <li><a href="#Length">Length</a>: 获取或设置文件的大小.</li>
      <li><a href="#AtEOF">AtEOF</a>: 获取一个非零数字当文件指针到达文件的末尾时.</li>
      <li><a href="#Encoding">Encoding</a>: 获取或设置此文件对象使用的编码.</li>
      <li><a href="#Handle">__Handle</a>: 获取用于 DllCall() 的系统文件句柄.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">方法</h2>

<div class="methodShort" id="Read"><h3>Read</h3>
<p>从文件读取字符串并向前移动文件指针.</p>
<pre class="Syntax">String := FileObj.<span class="func">Read</span>(<span class="optional">Characters</span>)</pre>
<h4 id="Read_Parameters">参数</h4>
<dl>
  <dt>Characters</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略, 则读取文件的剩余部分并作为单个字符串返回. 否则, 请指定需读取的最大字符数. 如果 File 对象创建于非搜寻设备(例如控制台缓冲区或管道) 的句柄, 省略此参数可能引起执行方法失败或仅返回当前可用的数据.</p>
  </dd>
</dl>
<h4 id="Read_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
<p>此方法返回读取的字符串.</p>
</div>

<div class="methodShort" id="Write"><h3>Write</h3>
<p>写入字符串到文件并向前移动文件指针.</p>
<pre class="Syntax">BytesWritten := FileObj.<span class="func">Write</span>(String)</pre>
<h4 id="Write_Parameters">参数</h4>
<dl>
  <dt>String</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>要写入的字符串.</p>
  </dd>
</dl>
<h4 id="Write_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>此方法返回写入的字节数(不是字符数).</p>
</div>

<div class="methodShort" id="ReadLine"><h3>ReadLine</h3>
<p>从文件中读取一行文本并使文件指针向前移动.</p>
<pre class="Syntax">TextLine := FileObj.<span class="func">ReadLine</span>()</pre>
<h4 id="ReadLine_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
<p>此方法返回一行文本, 不包括行结束符.</p>
<h4 id="ReadLine_Remarks">备注</h4>
<p>可以读取长达 65,534 个字符的行. 如果一个行的长度超过这个长度, 则该行的其余部分将通过对此方法的后续调用返回.</p></div>

<div class="methodShort" id="WriteLine"><h3>WriteLine</h3>
<p>将一行文本写入文件, 并向后移动文件指针.</p>
<pre class="Syntax">BytesWritten := FileObj.<span class="func">WriteLine</span>(<span class="optional">String</span>)</pre>
<h4 id="WriteLine_Parameters">参数</h4>
<dl>
  <dt>String</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>如果为空或省略, 则写入空行. 否则, 请指定要写入的字符串, 根据打开文件时使用的 EOL 标志, 字符串后面总是跟着 <code>`n</code> 或 <code>`r`n</code>.</p>
  </dd>
</dl>
<h4 id="WriteLine_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>此方法返回写入的字节数(不是字符数).</p>
</div>

<div class="methodShort" id="ReadNum"><h3>Read<i>NumType</i></h3>
<p>从文件中读取指定类型的数据并使文件指针向前移动.</p>
<pre class="Syntax">Num := FileObj.<span class="func">Read<i>NumType</i></span>()</pre>
<p><em>NumType</em> 可以是 UInt, Int, Int64, Short, UShort, Char, UChar, Double 或 Float. 这些类型名称的含义与 <a href="DllCall.htm#types">DllCall</a> 中的相同.</p>
<h4 id="ReadNum_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#numbers">整数</a>, <a href="../Concepts.htm#numbers">浮点数</a>或<a href="../Concepts.htm#nothing">字符串(空)</a></p>
<p>如果读取成功, 此方法返回一个数字,  否则为空字符串. 
<h4 id="ReadNum_Remarks">备注</h4>
<p>如果读出的字节数为非零, 但小于 <em>NumType</em> 的大小, 那么缺失的字节数被假定为零.</p>
</div>

<div class="methodShort" id="WriteNum"><h3>Write<i>NumType</i></h3>
<p>写入指定类型的数据到文件并使文件指针向前移动.</p>
<pre class="Syntax">BytesWritten := FileObj.<span class="func">Write<i>NumType</i></span>(Num)</pre>
<p><em>NumType</em> 可以是 UInt, Int, Int64, Short, UShort, Char, UChar, Double 或 Float. 这些类型名称的含义与 <a href="DllCall.htm#types">DllCall</a> 中的相同.</p>
<h4 id="WriteNum_Parameters">参数</h4>
<dl>
  <dt>Num</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a>或<a href="../Concepts.htm#numbers">浮点数</a></p>
    <p>写入的数字.</p>
  </dd>
</dl>
<h4 id="WriteNum_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>此方法返回写入的字节数. 例如, 写入成功时, <code>FileObj.WriteUInt(42)</code> 返回 4.</p>
</div>

<div class="methodShort" id="RawRead"><h3>RawRead</h3>
<p>从文件读取原始的二进制数据到内存并向前移动文件指针.</p>
<pre class="Syntax">BytesRead := FileObj.<span class="func">RawRead</span>(Buffer <span class="optional">, Bytes</span>)</pre>
<h4 id="RawRead_Parameters">参数</h4>
<dl>
  <dt>Buffer</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#objects">对象</a>或<a href="../Concepts.htm#numbers">整数</a></p>
    <p>将接收数据的类<a href="Buffer.htm">缓冲</a>对象或内存地址.</p>
    <p>建议读入<a href="Buffer.htm">缓冲</a>. 如果省略 <em>Bytes</em>, 它默认为缓冲的大小. 如果 <em>Bytes</em> 超过缓冲的大小, 则抛出异常.</p>
    <p>如果传递一个内存地址, 则 <em>Bytes</em> 也必须指定.</p>
  </dd>
  <dt>Bytes</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>要读取的最大字节数. 这是可选的, 当 <em>Buffer</em> 是一个对象或字符串变量(不推荐); 否则, 它是必需的.</p>
  </dd>
</dl>
<h4 id="RawRead_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>此方法返回读取的字节数.</p>
</div>

<div class="methodShort" id="RawWrite"><h3>RawWrite</h3>
<p>写入原始的二进制数据到文件并向前移动文件指针.</p>
<pre class="Syntax">BytesWritten := FileObj.<span class="func">RawWrite</span>(Data <span class="optional">, Bytes</span>)</pre>
<h4 id="RawWrite_Parameters">参数</h4>
<dl>
  <dt>Data</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#objects">对象</a>, <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#numbers">整数</a></p>
    <p>类<a href="Buffer.htm">缓冲</a>对象或包含二进制数据的字符串, 或内存地址. 如果指定了一个对象或字符串, <em>Bytes</em> 是可选的, 默认为缓冲或字符串的大小. 否则, 必须指定 <em>Bytes</em>.</p>
  </dd>
  <dt>Bytes</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>要写入的字节数. 当 <em>Data</em> 是一个对象或字符串时, 这是可选的; 否则, 它是必需的.</p>
  </dd>
</dl>
<h4 id="RawWrite_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>此方法返回写入的字节数.</p>
</div>

<div class="methodShort" id="Seek"><h3>Seek</h3>
<p>移动文件指针.</p>
<pre class="Syntax">IsMoved := FileObj.<span class="func">Seek</span>(Distance <span class="optional">, Origin</span>)</pre>
<h4 id="Seek_Parameters">参数</h4>
<dl>
  <dt>Distance</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>要移动的距离, 单位为字节. 较小的值更接近文件的开始处.</p>
  </dd>
  <dt>Origin</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略, 当 <em>Distance</em> 为负数时, 默认为 2, 其他情况, 为 0. 否则, 请指定以下数字之一, 以指示文件指针开始移动的起点:</p>
    <ul>
      <li>0(SEEK_SET): 文件的开始处. <i>Distance</i> 必须为零或更大.</li>
      <li>1(SEEK_CUR): 文件指针的当前位置.</li>
      <li>2(SEEK_END): 文件的末尾. <em>Distance</em> 通常应该为负数.</li>
    </ul>
  </dd>
</dl>
<h4 id="Seek_Return_Value">返回值</h4>
<p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
<p>此方法返回 1(true), 如果成功, 否则为 0(false).</p>
<h4 id="Seek_Remarks">备注</h4>
<p>如果 <em>Distance</em> 不是负数, 并且 <em>Origin</em> 省略或为 0(SEEK_SET) 时, 此方法等同于 <code>FileObj.Pos := Distance</code>.</p>
</div>

<div class="methodShort" id="Close"><h3>Close</h3>
<p>关闭文件, 将缓存中的任何数据写入磁盘, 并释放共享锁.</p>
<pre class="Syntax">FileObj.<span class="func">Close</span>()</pre>
<p>虽然在释放对象时文件会自动关闭, 但建议尽快关闭文件.</p></div>

<h2 id="Properties">属性</h2>

<div class="methodShort" id="Pos"><h3>Pos</h3>
<p>检索或设置文件指针的位置.</p>
<pre class="Syntax">CurrentPos := FileObj.<span class="func">Pos</span></pre>
<pre class="Syntax">FileObj.<span class="func">Pos</span> := NewPos</pre>
<p><em>CurrentPos</em> 和 <em>NewPos</em> 是从文件开始的字节偏移量, 其中 0 是第一个字节. 当向文件写入数据或从文件中读取数据时, 文件指针自动移动到该数据之后的下一个字节.</p>
<p>此方法等同于 <code>FileObj.Seek(NewPos)</code>.</p>
</div>

<div class="methodShort" id="Length"><h3>Length</h3>
<p>获取或设置文件的大小.</p>
<pre class="Syntax">CurrentSize := FileObj.<span class="func">Length</span></pre>
<pre class="Syntax">FileObj.<span class="func">Length</span> := NewSize</pre>
<p><em>CurrentSize</em> 和 <em>NewSize</em> 是文件的大小, 单位为字节.</p>
<p>此属性应该仅用于真实的文件. 如果 File 对象创建于管道的句柄, 那么它可能返回管道内部缓冲区中当前可用的数据量, 但不能保证一定如此.</p></div>

<div class="methodShort" id="AtEOF"><h3>AtEOF</h3>
  <p>当文件指针到达文件末尾时, 返回非零数字, 否则为零.</p>
<pre class="Syntax">IsAtEOF := FileObj.<span class="func">AtEOF</span></pre>
  <p>此属性应该仅用于真实的文件. 如果 File 对象创建于非寻址设备(例如控制台缓冲区或管道) 的句柄, 那么返回的值可能没有意义, 因为这些设备逻辑上没有 "文件末尾".</p></div>

<div class="methodShort" id="Encoding"><h3>Encoding</h3>
<p>检索或设置此文件对象使用的文本编码.</p>
<pre class="Syntax">CurrentEncoding := FileObj.<span class="func">Encoding</span></pre>
<pre class="Syntax">FileObj.<span class="func">Encoding</span> := NewEncoding</pre>
  <p><em>NewEncoding</em> 可以是一个数字代码页标识符(请参阅 <a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">Microsoft Docs</a>) 或以下字符串之一.</p>
  <p><em>CurrentEncoding</em> 为以下字符串之一:</p>
  <ul>
	<li><code class="no-highlight">UTF-8</code>: Unicode UTF-8, 相当于 CP65001.</li>
	<li><code class="no-highlight">UTF-16</code>: Unicode UTF-16 小端字节顺序标识, 相当于 CP1200.</li>
	<li><code>CP<i>nnn</i></code>: 带有数字标识符 <i>nnn</i> 的编码页.</li>
  </ul>
  <p><em>CurrentEncoding</em> 不会返回带 <code>-RAW</code> 后缀的值, 不论文件如何被打开或是否包含字节顺序标识(BOM). 设置 <em>NewEncoding</em> 不会增加或移除 BOM, 因为 BOM 通常在文件建立时就被写入其中了.</p>
  <p>设置 <em>NewEncoding</em> 为 <code class="no-highlight">UTF-8-RAW</code> 或 <code class="no-highlight">UTF-16-RAW</code> 合法, 但 <code>-RAW</code> 后缀将被忽略. 这仅适用于 <code>FileObj.Encoding</code>, 而不会影响 <a href="FileOpen.htm">FileOpen</a>.</p>
</div>

<div class="methodShort" id="Handle"><h3>Handle</h3>
  <p>返回用于 <a href="DllCall.htm">DllCall</a> 的系统文件句柄. 请参阅 <a href="https://learn.microsoft.com/windows/win32/api/fileapi/nf-fileapi-createfilea">CreateFile</a>.</p>
<pre class="Syntax">Handle := FileObj.<span class="func">Handle</span></pre>
<p>文件对象使用内部缓冲区读取或写入. 如果数据已经被写入对象的内部缓冲区, 则在返回句柄前会确保把数据写入磁盘. 如果缓冲区中包含从文件读取的数据, 则会把数据丢弃且文件指针的实际位置被重设为由 <a href="#Pos">Pos</a> 属性表示的逻辑位置.</p></div>

</body>
</html>