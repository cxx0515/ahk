<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>GuiControl 对象 - 方法 &amp; 属性 | AutoHotkey v2</title>
<meta name="description" content="The GuiControl object provides an interface for modifying GUI controls and retrieving information about them." />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControl 对象</h1>
<pre class="NoIndent">class Gui.Control extends Object</pre>

<p>提供用于修改 GUI 控件并检索有关控件的信息的接口. <a href="Gui.htm#Add">Gui.Add</a>, <a href="Gui.htm#__Item">Gui.__Item</a> 和 <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a> 返回这种类型的对象.</p>

<p>下面使用 "GuiCtrl" 作为任何 <code>Gui.Control</code> 类实例的占位符.</p>
<p><code>Gui.Control</code> 作为所有 GUI 控件的基类, 但是每种类型的控件都有自己的类. 以下一些方法是由适当的类的原型, 或 <code>Gui.List</code> 基类定义的. 有关完整列表, 请参阅<a href="../ObjList.htm">内置的类</a>.</p>
<p>除了从 <a href="Object.htm">Object</a> 继承的方法和属性外, GuiControl 对象还具有以下预定义的方法和属性.</p>

<h2 id="toc">目录</h2>
<ul class="indent">
  <li><a href="#Methods">方法</a>:
    <ul>
      <li><a href="#Add">Add</a>: 添加项目到多项目控件中.</li>
  <li><a href="#Choose">Choose</a>: 选择多项目控件中的项目.</li>
  <li><a href="#Delete">Delete</a>: 删除的项目控件中的一个或所有项目.</li>
  <li><a href="#Focus">Focus</a>: 设置键盘焦点到控件上.</li>
  <li><a href="#GetPos">GetPos</a>: 获取控件的位置和大小.</li>
  <li><a href="#Move">Move</a>: 移动和/或调整控件的大小.</li>
  <li><a href="#OnCommand">OnCommand</a>: 注册一个在 WM_COMMAND 上调用的函数或方法,.</li>
  <li><a href="GuiOnEvent.htm">OnEvent</a>: 注册给定<a href="GuiOnEvent.htm#Control_Events">事件</a>触发时要调用的函数或方法.</li>
  <li><a href="GuiOnNotify.htm">OnNotify</a>: 注册一个在 WM_NOTIFY 上调用的函数或方法.</li>
  <li><a href="#Opt">Opt</a>: 为控件的外观和行为设置各种选项和样式.</li>
  <li><a href="#Redraw">Redraw</a>: 重绘控件所占的 GUI 窗口区域.</li>
  <li><a href="#SetFont">SetFont</a>: 设置控件的字体字体, 大小, 样式和/或颜色.</li>
    </ul>
  </li>
  <li><a href="#Properties">属性</a>:
    <ul>
      <li><a href="#ClassNN">ClassNN</a>: 检索控件的类名和序列编号(ClassNN).</li>
  <li><a href="#Enabled">Enabled</a>: 检索或设置控件的交互状态.</li>
  <li><a href="#Focused">Focused</a>: 检索控件的焦点状态.</li>
  <li><a href="#Gui">Gui</a>: 检索控件的父窗口的 <a href="Gui.htm">Gui 对象</a>.</li>
  <li><a href="#Hwnd">Hwnd</a>: 检索控件的窗口句柄(HWND).</li>
  <li><a href="#Name">Name</a>: 检索或设置控件的显式名称.</li>
  <li><a href="#Text">Text</a>: 检索或设置控件的文本/标题.</li>
  <li><a href="#Type">Type</a>: 检索控件的类型.</li>
  <li><a href="#Value">Value</a>: 检索或设置具有值属性的控件的内容.</li>
  <li><a href="#Visible">Visible</a>: 检索或设置控件的可见状态.</li>
    </ul>
  </li>
  <li><a href="#GenRemarks">备注</a>:
    <ul>
      <li><a href="#redraw-remarks">Redraw</a>: 关于控件重绘行为的性能相关注释.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">方法</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>添加项目到多项目控件(ListBox, DropDownList, ComboBox 或 Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Add</span>(Items)</pre>
<h4 id="Add_Parameters">参数</h4>
<dl>
  <dt>Items</dt><dd>
    <p>类型:<a href="Array.htm">Array</a></p>
    <p>将作为项目插入控件列表末尾的字符串数组, 例如 <code>["Red","Green","Blue"]</code>.</p>
  </dd>
</dl>
<h4 id="Add_Remarks">备注</h4>
<p>要替换(覆盖) 列表, 请事先使用 <a href="#Delete">Delete 方法</a>. 要选择一个项目, 请使用 <a href="#Choose">Choose 方法</a>.</p>
<h4 id="Add_Related">相关</h4>
<p><a href="ListView.htm#Add">ListView.Add</a>, <a href="TreeView.htm#Add">TreeView.Add</a></p>
</div>

<div class="methodShort" id="Choose">
<h3>Choose</h3>
<p>在多项目控件(ListBox, DropDownList, ComboBox 或 Tab) 中选择一个项目.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Choose</span>(Value)</pre>
<h4 id="Choose_Parameters">参数</h4>
<dl>
  <dt>Value</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a>或<a href="../Concepts.htm#strings">字符串</a></p>
    <p>指定 1 表示第一个项目, 2 表示第二个, 等等.</p>
    <p>如果 <em>Value</em> 是字符串(即使是数字字符串), 将选择名称前部与 <em>Value</em> 相匹配的项目. 搜索不区分大小写. 例如, 如果控件中包含 "UNIX Text" 项目, 指定单词 unix(小写) 就可以选择它. 对于一个<a href="GuiControls.htm#ListBoxMulti">多选 ListBox</a>, 所有匹配的项目都会被选中.</p>
    <p>如果 <em>Value</em> 为零或为空, 则当前选择将被移除.</p></dd>
</dl>
<h4 id="Choose_Remarks">备注</h4>
<p>要选择或取消选择一个<a href="GuiControls.htm#ListBoxMulti">多选 ListBox</a> 中的 <u>所有</u> 项目, 请参照此例:</p>
<pre>PostMessage 0x185, 1, -1, ListBox  <em>; 选择所有项目. 0x185 是 LB_SETSEL.</em>
PostMessage 0x185, 0, -1, ListBox  <em>; 取消选择所有项目.</em>
ListBox.Choose(0)  <em>; 取消选择所有项目.</em></pre>
<p>与 <a href="ControlChooseIndex.htm">ControlChooseIndex</a> 不同, 该方法不会触发 <a href="GuiOnEvent.htm#Change">Change</a> 或 <a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a> 事件.</p>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>删除多项目控件(ListBox, DropDownList, ComboBox 或 Tab) 中的一个或所有项目.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Delete</span>(<span class="optional">Value</span>)</pre>
<h4 id="Delete_Parameters">参数</h4>
<dl>
  <dt>Value</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略, 则删除所有项目. 否则, 指定 1 表示第一个项目, 2 表示第二个, 等等. </p>
  </dd>
</dl>
<h4 id="Delete_Remarks">备注</h4>
<p>对于 Tab 控件, 一个标签的子控件会与其原始的标签编号相关联; 也就是说, 它们永远不会与其标签的实际显示名称相关联. 因此, 重命名或删除一个选项卡不会改变子控件所属的选项卡号. 例如, 如果有三个选项卡 <code>["Red","Green","Blue"]</code> 并且通过 <code>MyTab.Delete(2)</code> 删除了第二个选项卡, 则原来与 Green 相关联的子控件现在将与 Blue 相关联. 由于这种行为, 一般只应删除最后的标签页. 以这种方式删除的标签页可以在以后再添加回来, 届时它们将重新获得原来的控件集.</p>
<h4 id="Delete_Related">相关</h4>
<p><a href="ListView.htm#Delete">ListView.Delete</a>, <a href="TreeView.htm#Delete">TreeView.Delete</a></p>
</div>

<div class="methodShort" id="Focus">
<h3>Focus</h3>
<p>设置键盘焦点到控件上.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Focus</span>()</pre>
<p>要让设置生效, 窗口一般不能处于最小化或隐藏状态.</p>
<p>要检索控件的焦点状态, 请使用 <a href="#Focused">Focused 属性</a>.</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>获取控件的位置和大小.</p>
<pre class="Syntax">GuiCtrl.<span class="func">GetPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<h4 id="GetPos_Parameters">参数</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>如果省略, 则不存储相应的值. 否则, 指定对输出变量的引用, 在输出变量中存储控件左上角的 X 和 Y 坐标(以像素为单位). 这些坐标相对于窗口客户端区域的左上角,该区域不包括标题栏, 菜单栏和边框.</p>
  </dd>
  <dt>&amp;Width, &amp;Height</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>如果省略, 则不存储相应的值. 否则, 指定对输出变量的引用, 以存储控件的宽度和高度(以像素为单位).</p>
  </dd>
</dl>
<h4 id="GetPos_Remarks">备注</h4>
<p>与 <a href="ControlGetPos.htm">ControlGetPos</a> 不同的是, 本方法对返回的坐标应用了 <a href="Gui.htm#DPIScale">DPI 缩放</a>(除非使用了 <code>-DPIScale</code> 选项).</p>
<h4 id="GetPos_Examples">示例</h4>
<pre>MyEdit.GetPos(&amp;x, &amp;y, &amp;w, &amp;h)
MsgBox "The X coordinate is " x ". The Y coordinate is " y ". The width is " w ". The height is " h "."
</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>移动和/或调整控件的大小.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<h4 id="Move_Parameters">参数</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略其中任何一个, 则不会更改控件在该维度中的位置. 否则, 指定控件新位置左上角的 X 和 Y 坐标(以像素为单位). 坐标相对于窗口的客户端区域的左上角, 该区域不包括标题栏, 菜单栏和边框.</p>
  </dd>
  <dt>Width, Height</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略其中任何一个, 则不会更改该维度中的控件的大小. 否则, 指定控件的新宽度和高度(以像素为单位).</p>
  </dd>
</dl>
<h4 id="Move_Remarks">备注</h4>
<p>与 <a href="ControlMove.htm">ControlMove</a> 不同的是, 本方法将 <a href="Gui.htm#DPIScale">DPI 缩放</a>应用于坐标(除非使用了 <code>-DPIScale</code> 选项).</p>
<h4 id="Move_Examples">示例</h4>
<pre>MyEdit.Move(10, 20, 200, 100)
MyEdit.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)</pre>
</div>

<div class="methodShort" id="OnCommand">
<h3>OnCommand</h3>
<p>注册一个函数或方法, 当通过 <a href="GuiOnCommand.htm#WM_COMMAND">WM_COMMAND</a> 消息接收到控件通知时调用.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnCommand</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>有关详情, 请参阅 <a href="GuiOnCommand.htm">OnCommand</a>.</p>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>注册给定<a href="GuiOnEvent.htm#Control_Events">事件</a>触发时要调用的函数或方法.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>有关详情, 请参阅 <a href="GuiOnEvent.htm">OnEvent</a>.</p>
</div>

<div class="methodShort" id="OnNotify">
<h3>OnNotify</h3>
<p>注册一个函数或方法, 当通过 <a href="GuiOnNotify.htm#WM_NOTIFY">WM_NOTIFY</a> 消息接收到控件通知时调用.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnNotify</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>有关详情, 请参阅 <a href="GuiOnNotify.htm">OnNotify</a>.</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>为控件的外观和行为设置各种选项和样式.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Opt</span>(Options)</pre>
<h4 id="Opt_Parameters">参数</h4>
<dl>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>指定一个或多个<a href="GuiControls.htm">控件专用</a>或<a href="Gui.htm#OtherOptions">通用</a>选项和样式, 用一个或多个空格或制表符与下一个隔开.</p>
  </dd>
</dl>
<h4 id="Opt_Remarks">备注</h4>
<p>在下面的例子中, 该控件<a href="Gui.htm#Disabled">被禁用</a>, 并且它的 <a href="Gui.htm#Background">background</a> 恢复为系统默认值:</p>
<pre>MyEdit.Opt("+Disabled -Background")</pre>
<p>在下一个例子中, OK 按钮被变成了新的默认按钮:</p>
<pre>OKButton.Opt("+Default")</pre>
<p>虽然<a href="../misc/Styles.htm">样式</a>和扩展样式也被识别, 但其中一些样式在控件创建后无法应用或删除. 即使成功应用了某项更改, 控件也可能选择忽略它.</p>
</div>

<div class="methodShort" id="Redraw">
<h3>Redraw</h3>
<p>重绘控件所占的 GUI 窗口区域.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Redraw</span>()</pre>
<p>虽然当重复和快速调用时, 可能会导致不必要的闪烁效果, 但它解决了某些控件类型(如 <a href="GuiControls.htm#GroupBox">GroupBox</a>) 的显示重影的问题.</p>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>设置控件的字体字体, 大小, 样式和/或颜色.</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<p>省略这两个参数, 以将字体设置为 GUI 的当前字体, 如 <a href="Gui.htm#SetFont">Gui.SetFont</a> 所设置. 否则, 任何未指定的字体属性将从控件的先前字体中复制. 只有在 <em>Options</em> 中指定的情况下, 文本颜色才会改变.</p>
<p>关于这两个参数的详细说明, 请参阅 <a href="Gui.htm#SetFont">Gui.SetFont</a>.</p>
</div>

<h2 id="Properties">属性</h2>
<div class="methodShort" id="ClassNN">
<h3>ClassNN</h3>
<p>检索控件的类名和序列编号(ClassNN).</p>
<pre class="Syntax">ClassNN := GuiCtrl.<span class="func">ClassNN</span></pre>
<p>控件的 ClassNN 是它的窗口类名后面跟着它在包含它的顶级窗口中的序列号. 例如, "Edit1" 是窗口上的第一个编辑控件, 而 "Button12" 是第十二个按钮.</p>
<p>相关: <a href="ControlGetClassNN.htm">ControlGetClassNN</a></p>
</div>

<div class="methodShort" id="Enabled">
<h3>Enabled</h3>
<p>检索或设置控件的交互状态.</p>
<pre class="Syntax">CurrentSetting := GuiCtrl.<span class="func">Enabled</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Enabled</span> := NewSetting</pre>
<p>如果已经赋值, <em>CurrentSetting</em> 为 <em>NewSetting</em>, 否则, 默认为 1(true), 除非被 <a href="Gui.htm#Disabled">Disabled 选项</a>覆盖.</p>
<p><em>NewSetting</em> 是一个<a href="../Concepts.htm#boolean">布尔值</a>, 用于启用或禁用此设置. 如果为 true, 则启用该控件. 如果为 false, 则禁用该控件.</p>
<p>对于 Tab 控件, 这也将启用或禁用该 Tab 的所有子控件. 然而, 任何通过 <code>GuiCtrl.Enabled := false</code> 显式禁用的子控件将记住该设置, 因此即使在其 Tab 控件被重新启用后也会保持禁用状态.</p>
</div>

<div class="methodShort" id="Focused">
<h3>Focused</h3>
<p>检索控件当前焦点状态.</p>
<pre class="Syntax">IsFocused := GuiCtrl.<span class="func">Focused</span></pre>
<p>如果控件有键盘焦点, <em>IsFocused</em> 为 1(true), 否则为 0(false).</p>
<p>要让设置生效, 窗口一般不能处于最小化或隐藏状态.</p>
<p>要对聚焦控件, 请使用 <a href="#Focus">Focus 方法</a>.</p>
</div>

<div class="methodShort" id="Gui">
<h3>Gui</h3>
<p>检索控件的父窗口的 <a href="Gui.htm">Gui 对象</a>.</p>
<pre class="Syntax">GuiObj := GuiCtrl.<span class="func">Gui</span></pre>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>检索控件的窗口句柄(HWND). </p>
<pre class="Syntax">Hwnd := GuiCtrl.<span class="func">Hwnd</span></pre>
<p>控件的 HWND, 通常与 <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a> 和 <a href="DllCall.htm">DllCall</a> 一起使用. 它也可以直接用于 <a href="Control.htm#Parameter">Control 参数</a>.</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>检索或设置控件的显式名称.</p>
<pre class="Syntax">CurrentName := GuiCtrl.<span class="func">Name</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Name</span> := NewName</pre>
<p>如果已经赋值, <em>CurrentName</em> 为 <em>NewName</em>, 否则默认为空字符串, 除非被 <a href="Gui.htm#var">V 选项</a>覆盖.</p>
<p><em>NewName</em> 为控件的新名称, 它可以与 <a href="Gui.htm#__Item">Gui.__Item</a> 一起使用, 来检索 GuiControl 对象. 对于大多数支持输入的控件, <a href="Gui.htm#Submit">Gui.Submit</a> 也会使用这个名称.</p>
</div>

<div class="methodShort" id="Text">
<h3>Text</h3>
<p>检索或设置控件的文本/标题.</p>
<pre class="Syntax">CurrentText := GuiCtrl.<span class="func">Text</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Text</span> := NewText</pre>
<p>注意: 如果控件没有可见的标题文本和文本值, 则此属性对应于控件的隐藏标题文本(如 <a href="ControlGetText.htm">ControlGetText</a>/<a href="ControlSetText.htm">ControlSetText</a>).</p>
<p><em>CurrentText</em> 和 <em>NewText</em> 的值取决于<a href="GuiControls.htm">控件类型</a>:</p>

<p><strong>Button / CheckBox / Edit / GroupBox / Link / Radio / Text</strong></p>
<p><em>CurrentText</em> 和 <em>NewText</em> 是 <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#CheckBox">CheckBox</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Radio">Radio</a> 或 <a href="GuiControls.htm#Text">Text</a> 控件的标题/显示文本. 由于控件不会自动展开, 如果需要展开控件, 请使用 <code>GuiCtrl.<a href="#Move">Move</a>(,, 300)</code> 或类似的方法.</p>

<p><strong>DateTime</strong></p>
<p><em>CurrentText</em> 和 <em>NewText</em> 是 <a href="GuiControls.htm#DateTime">DateTime</a> 控件显示的格式化文本. 不支持为控件指定格式化的日期/时间字符串. 要更改显示的日期/时间, 请为 <a href="#Value">Value 属性</a>赋值为一个 <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> 格式的日期-时间戳.</p>

<p><strong>DropDownList, ComboBox, ListBox, Tab</strong></p>
<p><em>CurrentText</em> 和 <em>NewText</em> 是 <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a> 或 <a href="GuiControls.htm#Tab">Tab</a> 控件中当前选择的项/选项卡的文本.</p>
<p><em>NewText</em> 应该是要选择的项目/标签的全部文本(不区分大小写).</p>
<p>对于 ComboBox, 如果没有选中的项目, 则会检索控件编辑栏中的文本. 对于其他控件, <em>CurrentText</em> 为空/空白. 同样, 如果 <em>NewText</em> 为空/空白, 则当前项/标签将被取消选择.</p>
<p>对于一个<a href="GuiControls.htm#ListBoxMulti">多选 ListBox</a>, <em>CurrentText</em> 是一个数组. <em>NewText</em> 不能是一个数组, 但如果多个项目匹配, 它们都会被选择. 要用不同的文本选择多个项目, 请重复调用 <a href="#Choose">Choose 方法</a>.</p>
<p>要根据项目的位置编号而不是文本选择项目, 请使用 <a href="#Value">Value 属性</a>.</p>

<p><strong>Edit</strong></p>
<p><em>CurrentText</em> 和 <em>NewText</em> 是 <a href="GuiControls.htm#Edit">Edit</a> 控件的文本. 与其他控件一样, 文本按原样检索或设置; 不用预先进行尾转换. 要检索或设置多行 Edit 控件的文本, 同时在 <code>`r`n</code> 和 <code>`n</code> 之间进行转换, 请使用 <a href="#Value">Value 属性</a>.</p>

<p><strong>StatusBar</strong></p>
<p><em>CurrentText</em> 和 <em>NewText</em> 是 <a href="GuiControls.htm#StatusBar">StatusBar</a> 控件第一部分的文本(使用 <a href="GuiControls.htm#SB_SetText">SB.SetText</a> 以获得更大的灵活性).</p>
</div>

<div class="methodShort" id="Type">
<h3>Type</h3>
<p>检索控件的类型.</p>
<pre class="Syntax">CurrentType := GuiCtrl.<span class="func">Type</span></pre>
<p>取决于<a href="GuiControls.htm">控件类型</a>, <var>CurrentType</var> 是以下字符串之一: ActiveX, Button, CheckBox, ComboBox, Custom, DateTime, DDL, Edit, GroupBox, Hotkey, Link, ListBox, ListView, MonthCal, Pic, Progress, Radio, Slider, StatusBar, Tab, Tab2, Tab3, Text, TreeView, UpDown.</p>
</div>

<div class="methodShort" id="Value">
<h3>Value</h3>
<p>检索或设置具有值的控件的内容.</p>
<pre class="Syntax">CurrentValue := GuiCtrl.<span class="func">Value</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Value</span> := NewValue</pre>
<p>注意: 如果控件不包含值, <em>CurrentValue</em> 将是空白, 并且赋值 <em>NewValue</em> 将引发错误. 无效的值会抛出异常.</p>
<p><em>CurrentValue</em> 和 <em>NewValue</em> 的值取决于<a href="GuiControls.htm">控件类型</a>:</p>

<p><strong>ActiveX</strong></p>
<p><em>CurrentValue</em> 是 <a href="GuiControls.htm#ActiveX">ActiveX</a> 控件的 ActiveX 对象. 例如, 如果控件是用文本 <em>Shell.Explorer</em> 创建的, 这是一个 <a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752043(v=vs.85)">WebBrowser</a> 对象. 每次都返回相同的<a href="ComValue.htm">包装器对象</a>.</p>
<p><em>NewValue</em> 无效并抛出异常.</p>

<p><strong>CheckBox / Radio</strong></p>
<p>如果选中了 <a href="GuiControls.htm#CheckBox">CheckBox</a> 或 <a href="GuiControls.htm#Radio">Radio</a> 控件, 则 <em>CurrentValue</em> 为 1, 如果未选中, 则为 0, 如果有灰色复选标记, 则为 -1.</p>
<p><em>NewValue</em> 可以是 0 来取消选中按钮, 1 来选中它, 或者 -1 来给它一个灰色的复选标记. 对于 Radio 按钮,  如果有一个按钮被选中(打开) 并且它是一个多个单选按钮组的成员, 那么该组中的其他单选按钮将被自动取消选中.</p>
<p>如果要获取或设置控件的文本/标题, 请使用 <a href="#Text">Text 属性</a>.</p>

<p><strong>ComboBox / DropDownList / ListBox / Tab</strong></p>
<p><em>CurrentValue</em> 是当前选中的项目/标签在 <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ListBox">ListBox</a> 或 <a href="GuiControls.htm#Tab">Tab</a> 控件中的位置编号. 如果没有选择, 则返回 0. 如果在 ComboBox 中输入了文本, 则使用第一个匹配文本的项目. 如果没有匹配的项目, 即使控件中有文本, 结果也是 0. 对于一个<a href="GuiControls.htm#ListBoxMulti">多选 ListBox</a>, 结果是一个数字数组(如果没有选择任何项目, 则为空).</p>
<p><em>NewValue</em> 是要选择的单个项目/标签的位置编号, 或者为零来清除当前的选择(即使对 Tab 控件也有效). 要选择多个项目, 请重复调用 <a href="#Choose">Choose 方法</a>.</p>
<p>要获取或设置选中项的文本而不是其位置, 请使用 <a href="#Text">Text 属性</a>.</p>

<p><strong>DateTime / MonthCal</strong></p>
<p><em>CurrentValue</em> 是当前在 <a href="GuiControls.htm#DateTime">DateTime</a> 或 <a href="GuiControls.htm#MonthCal">MonthCal</a> 控件中选择的 <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> 格式的日期-时间戳.</p>
<p><em>NewValue</em> 是 <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> 格式的日期-时间戳. 指定 <code>A_Now</code> 来使用当前日期和时间(今天). 对于 DateTime 控件, <em>NewValue</em> 可以是一个空字符串, 以使该控件没有选择日期/时间(如果它在创建时含有<a href="GuiControls.htm#ChooseNone">这个能力</a>). 对于 MonthCal 控件, 如果控件是<a href="GuiControls.htm#MonthCalMulti">多选的</a>, 则可以指定一个日期范围.</p>

<p><strong>Edit</strong></p>
<p><em>CurrentValue</em> 是 <a href="GuiControls.htm#Edit">Edit</a> 件的当前内容. 对于多行控件, 文本中的任何换行符将以普通换行符(`n) 表示, 而不是 <a href="ControlGetText.htm">ControlGetText</a> 和 <a href="ControlSetText.htm">ControlSetText</a> 等非 GUI 函数所使用传统的 CR+LF(`r`n).</p>
<p><em>NewValue</em> 是新的内容. 对于多行控件, <em>NewValue</em> 中任何缺少前回车(`r) 的换行(`n) 都会被自动转换为 CR+LF(`r`n) 以使其正确显示. 然而, 这通常不是一个问题, 因为当使用 <a href="Gui.htm#Submit">MyGui.Submit</a> 或检索这个值时, 这个转换会自动反过来, 用 LF(`n) 替换 CR+LF.</p>
<p>要检索或设置文本, 而不将 `n 转换为 `r`n, 请使用 <a href="#Text">Text 属性</a>.</p>

<p><strong>Hotkey</strong></p>
<p>如果 <a href="GuiControls.htm#Hotkey">Hotkey</a> 控件中有热键, 则 <em>CurrentValue</em> 为修饰符和键名; 否则为空. 例如: <code>^!C</code>, <code>^Home</code>, <code>+^NumpadHome</code>.</p>
<p><em>NewValue</em> 可以是一组修饰符和键名, 或空白以清空该控件. 例如: <code>^!c</code>, <code>^Numpad1</code>, <code>+Home</code>. 支持的修饰符仅包含 ^(Control), !(Alt), 和 +(Shift). 请参阅<a href="../KeyList.htm">按键列表</a>了解可用的按键名称.</p>

<p><strong>Picture</strong></p>
<p><em>CurrentValue</em> 是创建 <a href="GuiControls.htm#Picture">Picture</a> 控件时指定的图片文件名. 即使指定了新的图片文件名, 这个名称也不会改变.</p>
<p><em>NewValue</em> 是要加载的新图片的文件名(或<a href="../misc/ImageHandles.htm">句柄</a>)(关于支持的文件类型, 请参阅 <a href="GuiControls.htm#Picture">Picture</a>). 可以在文件名前指定零个或多个下列选项: <code>*wN</code>(宽度 N), <code>*hN</code>(高度 N) 和 <code>*IconN</code>(DLL 或 EXE 文件中的图标组编号 N). 在下面的例子中, 将加载第二个图标组中的默认图标, 设置宽度为 100 以及通过 "保持高宽比" 自动设置高度: <code>MyPic.Value := "*icon2 *w100 *h-1 C:\My Application.exe"</code>. 指定 <code>*w0 *h0</code> 使用图像的实际宽度和高度. 如果同时省略 <code>*w</code> 和 <code>*h</code>, 则调整图像以适应控件当前的大小. 从多图标的 .ICO 文件中加载时, 指定宽度和高度也决定了加载哪个图标. 注意: 在最后的选项和文件名之间只使用一个空格或制表符; 任何其他空格和制表符都会被视为文件名的一部分.</p>

<p><strong>Progress / Slider / UpDown</strong></p>
<p><em>CurrentValue</em> 是 <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Slider">Slider</a> 或 <a href="GuiControls.htm#UpDown">UpDown</a> 控件的当前位置.</p>
<p><em>NewValue</em> 是控件的新位置, 例如 <code>MySlider.Value := 10</code>. 要调整一个相对的数值, 请使用运算符 <code>+=</code>, <code>-=</code>, <code>++</code> 或 <code>--</code> 代替 <code>:=</code>. 如果新的位置超出了控件的范围, 控件一般会被设置为最近的有效值.</p>

<p><strong>Text</strong></p>
<p><em>CurrentValue</em> 是 <a href="GuiControls.htm#Text">Text</a> 控件的的文本/标题.</p>
<p><em>NewValue</em> 是控件的新文本. 由于控件不会自动展开, 所以如果需要扩大控件, 请使用 <code>GuiCtrl.<a href="#Move">Move</a>(,, 300)</code>.</p>
</div>

<div class="methodShort" id="Visible">
<h3>Visible</h3>
<p>检索或设置控件的当前可见状态.</p>
<pre class="Syntax">CurrentSetting := GuiCtrl.<span class="func">Visible</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Visible</span> := NewSetting</pre>
<p>如果已经赋值, <em>CurrentSetting</em> 为 <em>NewSetting</em>, 否则默认为 1(true), 除非被 <a href="Gui.htm#Hidden">Hidden 选项</a>覆盖.</p>
<p><em>NewSetting</em> 是一个<a href="../Concepts.htm#boolean">布尔值</a>, 用于启用或禁用这个设置. 如果为 true, 控件可见. 如果为 false, 控件被隐藏.</p>
<p>对于 Tab 控件, 这也将显示或隐藏该 Tab 的所有子控件. 如果您还想阻止一个控件的快捷键(下划线字母) 工作, 通过 <code>GuiCtrl.Enabled := false</code> 禁用该控件.</p>
</div>

<h2 id="GenRemarks">备注</h2>

<h3 id="redraw-remarks">Redraw</h3>
<p>当向控件(如 <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a> 或 <a href="GuiControls.htm#ListBox">ListBox</a>) 添加大量项目时, 可以通过防止在进行更改时重绘控件来提高性能. 这是通过在添加项目之前使用 <code>GuiCtrl.Opt("-Redraw")</code> 和在添加项目之后使用 <code>GuiCtrl.Opt("+Redraw")</code> 来实现的. 对控件的更改, 如果在禁用重绘前还未显示, 一般在重绘重新启用后才会显示.</p>
<p>出于性能原因, 即使启用了重绘, 对控件内容的更改通常也不会立即重绘该控件. 相反, 当程序检查其内部消息队列时, 控件的部分区域被 "失效", 通常在短暂延迟后重新绘制. 脚本可以通过调用 <code>Sleep -1</code> 立即强制执行此操作.</p>

</body>
</html>